MySQL Scheme for Tstat Log Analysis
-----------------------------------

The files in this directory can be used to load part of the information in 
the log_XXX files in a MySQL database, for further analysis.

The database is very simple, actually just simple tables with indexes,
useful for quick direct searches. Complex queries may require external
scripts, since JOINs over large tables might not be possible.

The included database scheme uses only few columns from the log_tcp_complete
and log_tcp_nocomplete files. Indeed, the scheme and the Perl scripts can 
easily be  adapted to include any kind of information extracted from the
log files, depending on the user needs. 

There are scripts for two different approaches: direct access to the MySQL or
CSV file creation (for later MySQL import using the 'mysqlimport' utility or 
the 'LOAD DATA INFILE' command). 

CSV files could be used if direct MySQL import in not possible (e.g. if there
is no MySQL server directly available) and might be faster when
importing large log files.

The scripts are provided "as is" with no guarantees.

Files:
 check_internal.pl	-- Function used to check if an IP address is internal,
                           needed for logs generated by Tstat before version 2.2r330
 db_tstat.sql		-- MySQL scheme
 load_db_tcp_no.pl	-- Script to load log_tcp_nocomplete information
 load_db_tcp.pl		-- Script to load log_tcp_complete information
 load_db_udp.pl		-- Script to load log_udp_information

 create_csv_tcp_no.pl   -- Script to create a CSV file from log_tcp_nocomplete
                           for later MySQL import
 create_csv_tcp.pl      -- Script to create a CSV file from log_tcp_complete
                           for later MySQL import
 create_csv_udp.pl       -- Script to create a CSV file from log_udp_complete
                           for later MySQL import


Instructions (MySQL)
--------------------

You need a MySQL installation, Perl, common Perl modules DBI and DBD:mysql. If you use
check_internal.pl, you will also need Net::CIDR (that you can install from CPAN).

1. Create a database using
   $ mysqladmin create databasename 
  
1b. (Optional) Grant suitable rights to a user to access the database, if
   you do not want to manage everything as administrator. 

2. Create the tables
   $ mysql databasename < db_tstat.sql
   
3. Modify the load_db_xx.pl scripts, inserting the correct database name, 
   username and password to access the database
   
4. (Optional) If needed, modify check_internal.pl, inserting the list of 
   internal networks (the same it is used by tstat with the -N option).
   
5. Load the data.
   The scripts expect the corresponding logfile on STDIN or as an argument
   on the command line. Example
   
   $ perl load_db_tcp.pl log_tcp_complete
   
   You can indicate several files on the command line, that will be read in
   order
   
   $ perl load_db_udp.pl log_udp_complete.1 log_udp_complete.2 


Instructions (CSV)
--------------------

You need a MySQL installation, Perl, common Perl modules Text::CSV (and the
optional Text::CSV_XS), IO::File, Socket. If you use check_internal.pl, 
you will also need Net::CIDR (that you can install from CPAN).

Steps 1.,1b.,2. are the same of the ones above

3. Modify the create_csv_xx.pl scripts, inserting the correct output file name,
   matching the tables created by db_tstat.sql. You do not need this step if
   you did not change the table names in db_tstat.sql.
   
4. (Optional) If needed, modify check_internal.pl, inserting the list of 
   internal networks (the same it is used by tstat with the -N option).

5. Create the CSV files.
   The scripts expect the corresponding logfile on STDIN or as an argument
   on the command line. Example
   
   $ perl create_csv_tcp.pl log_tcp_complete
   
   You can indicate several files on the command line, that will be read in
   order
   
   $ perl create_csv_udp.pl log_udp_complete.1 log_udp_complete.2 

   Each script will create a xxx.csv file
   
6. Import the CSV data in the database
   You can use the MySQL utility 'mysqlimport', moving in the directory where
   the files are located and executing
   
   $ mysqlimport databasename  -L --ignore --fields-terminated-by="," ./tcp.csv
   $ mysqlimport databasename  -L --ignore --fields-terminated-by="," ./tcp_no.csv
   $ mysqlimport databasename  -L --ignore --fields-terminated-by="," ./udp.csv

   If everything is ok, after each command you should see a report line like

   'databasename.tcp: Records: NNNN  Deleted: 0  Skipped: 0  Warnings: 0'

   where NNNN is the number of imported rows.

   Depending on your access rights, you might need to indicate username and
   password to access the database
   
   $ mysqlimport databasename -u username -p -L --ignore --fields-terminated-by="," ./tcp.csv
   
   Please consult the mysqlimport documentation for further details.
   You can similarly use the internal MySQL command LOAD DATA INFILE, providing
   parameters equivalent to the line options (see the MySQL manual).
   

6b. (Optional) You can speedup the import of large tables disabling the indexing
   before importing the tables and recreating the indexes later. This operation
   is already managed internally  in the script for direct MySQL access.

   Before importing:
   
   $ mysql databasename -u username -p password
   mysql> ALTER TABLE tcp    DISABLE KEYS;
   mysql> ALTER TABLE tcp_no DISABLE KEYS;
   mysql> ALTER TABLE udp    DISABLE KEYS;
   mysql> exit 

   After importing:

   $ mysql databasename -u username -p password
   mysql> ALTER TABLE tcp    ENABLE KEYS;
   mysql> ALTER TABLE tcp_no ENABLE KEYS;
   mysql> ALTER TABLE udp    ENABLE KEYS;
   mysql> exit 

Actual CSV creation is done in steps 3-5, that can be executed without accessing
to any MySQL database. The created files can be later transferred to the server
or further manipulated before importing.

Usage
-----

IP addresses src_ip and dst_ip are stored as integers. You need INET_ATON() and
INET_NTOA() to convert them to/from the dotted-decimal format.

To list all the destination IPs of TCP connections from 192.168.5.10:
 
 SELECT distinct INET_NTOA(dst_ip) FROM tcp 
                 WHERE src_ip=INET_ATON('192.168.5.10');

Ranges of addresses may be compared using the integer form. Find all the
connections  by hosts in the 192.168.16.0/24 network

 SELECT * FROM tcp WHERE src_ip>INET_ATON('192.168.16.0') 
                     AND src_ip<INET_ATON('192.168.16.255');
 
 or
 
 SELECT * FROM tcp WHERE src_ip BETWEEN INET_ATON('192.168.16.0') 
                                    AND INET_ATON('192.168.16.255');
